
package br.com.iagocolodetti.remotemouse;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author iagocolodetti
 */
public class ServerGUI extends javax.swing.JFrame {
    
    private final static int MIN_PORT = 0;
    private final static int MAX_PORT = 65535;
    
    private static ServerSocket serverSocket;
    private static Socket socket;
    private ServerStart serverStart;
    
    /**
     * Creates new form Server
     */
    public ServerGUI() {
        initComponents();
        
        // -------------------------------------------------
        // Definir tamanho exato do layout e centralizar
        setSize(new java.awt.Dimension(320, 346));
        setLocationRelativeTo(null);
        // -------------------------------------------------
        
        jTextFieldPort.requestFocus();
        
        DefaultCaret caret = (DefaultCaret) jTextAreaLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelIP = new javax.swing.JLabel();
        jTextFieldIP = new javax.swing.JTextField();
        jLabelPort = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jButtonLigarDesligar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RemoteMouseServer");
        setMaximumSize(new java.awt.Dimension(320, 346));
        setMinimumSize(new java.awt.Dimension(320, 346));
        setName("ServerGUI"); // NOI18N
        setResizable(false);

        jLabelIP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelIP.setText("IP:");

        jTextFieldIP.setEditable(false);
        jTextFieldIP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldIP.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabelPort.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelPort.setText("Porta:");

        jTextFieldPort.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPort.setText("1099");

        jButtonLigarDesligar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonLigarDesligar.setText("LIGAR");
        jButtonLigarDesligar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLigarDesligarActionPerformed(evt);
            }
        });

        jTextAreaLog.setEditable(false);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setLineWrap(true);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPort)
                    .addComponent(jLabelIP))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonLigarDesligar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIP)
                    .addComponent(jTextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPort)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonLigarDesligar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLigarDesligarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLigarDesligarActionPerformed

        if (jButtonLigarDesligar.getText().equals("LIGAR")) {
            String sPort = jTextFieldPort.getText();
            if (!sPort.isEmpty()) {
                try {
                    int port = Integer.parseInt(sPort);
                    if (port >= MIN_PORT && port <= MAX_PORT) {
                        setServerOpen(port);
                    } else { 
                        JOptionPane.showMessageDialog(rootPane, "O número da porta deve ser um inteiro positivo de no mínimo " + MIN_PORT + " e no máximo " + MAX_PORT + ".", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(rootPane, "A porta deve ser um número inteiro positivo de no mínimo " + MIN_PORT + " e no máximo " + MAX_PORT + ".", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Digite a porta em que deseja ligar o serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            setServerOpen(-1);
        }
    }//GEN-LAST:event_jButtonLigarDesligarActionPerformed

    private void addTextAreaLog(String text) {
        if (jTextAreaLog.getText().toString().isEmpty()) {
            jTextAreaLog.append(text);
        } else {
            jTextAreaLog.append("\n" + text);
        }
    }
    
    private void setServerOpen(int port) {
        if (port != -1) {
            serverStart = new ServerStart(port);
            Thread start = new Thread(serverStart);
            start.start();
            jButtonLigarDesligar.setText("DESLIGAR");
        } else {
            if (serverStart != null) {
                serverStart.setOpen(false);
            }
            try {
                if (socket != null) socket.close();
                if (serverSocket != null) serverSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                socket = null;
                serverSocket = null;
            }
            jTextFieldPort.setEditable(true);
            jTextFieldIP.setText("");
            jButtonLigarDesligar.setText("LIGAR");
        }
    }
    
    private void processMessage(String message) {
        
        String[] params = message.split("-");
        
        switch (params[0]) {
            case "1":
                new Mouse().click(Integer.parseInt(params[1]));
                break;
            case "2":
                new Mouse().cursor(Integer.parseInt(params[1]), Integer.parseInt(params[2]));
                break;
            case "3":
                new Mouse().scroll(Integer.parseInt(params[1]));
                break;
            default:
                break;
        }
    }
    
    private class ServerStart implements Runnable {
        
        private volatile boolean open;
        
        private int port;
        
        public ServerStart(int port) {
            open = true;
            this.port = port;
        }
        
        public void setOpen(boolean open) {
            this.open = open;
        }
        
        @Override
        public void run() {
            try {
                try {
                    serverSocket = new ServerSocket(port, 1, InetAddress.getLocalHost());
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(rootPane, "Não foi possível ligar o serviço, verifique se a porta já está em uso ou se a rede está funcionando.", "Erro", JOptionPane.ERROR_MESSAGE);
                    System.err.println(e);
                    setServerOpen(-1);
                    return;
                }
                
                jTextFieldPort.setEditable(false);
                jTextFieldIP.setText(InetAddress.getLocalHost().getHostAddress());
                addTextAreaLog("Serviço ligado.");
                socket = serverSocket.accept();
                addTextAreaLog("Cliente conectado: " + socket.getInetAddress().toString().replace("/", ""));
                        
                while (open) {
                    try {
                        DataInputStream dis = new DataInputStream(socket.getInputStream());
                        String message = dis.readUTF();
                        processMessage(message);
                    } catch (Exception e) {
                        addTextAreaLog("Cliente desconectado.");
                        socket = serverSocket.accept();
                        addTextAreaLog("Cliente conectado: " + socket.getInetAddress().toString().replace("/", ""));
                    }
                }
            } catch (Exception e) {
                addTextAreaLog("Serviço desligado.");
                setServerOpen(-1);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLigarDesligar;
    private javax.swing.JLabel jLabelIP;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextField jTextFieldIP;
    private javax.swing.JTextField jTextFieldPort;
    // End of variables declaration//GEN-END:variables
}
